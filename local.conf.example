# This file has the syntax of a -*- makefile -*- fragment.
# Copyright 2022, pEp Foundation
# This file is part of pEpEngine
# This file may be used under the terms of the GNU General Public License version 3
# see LICENSE.txt

# Changelog
#
# 2023-08 Make SQLITE3_FROM_OS configurable
#


# Introduction
# #########################################################

# The user is free to write a local.conf file in the same directory containing
# Makefile.conf in order to override some default definitions.

# This file is a template for the user to rename into local.conf and edit to
# suit her own configuration.


# Debugging symbols
# #########################################################

# We suggest always compiling the pEp Engine with debugging symbol: the price
# to pay is just an increase in binary code size, with no impact on execution
# speed.
# If the user disagrees with us and wants to compile without debugging symbols
# she can comment-out the line below.

# # Omit debugging symbols for a smaller (but not faster) binary.
# COMPILEWITHDEBUGGINGSYMBOLS = yes


# Satefy mode.
# #########################################################

# You may uncomment one of the three DEBUG definitions below.  Any other
# definition of DEBUG will result in a build-time error.
#
# An incompatibility was introduced in pEp Engine 3.2.0-RC21: an empty value
# for DEBUG no longer means 'release', and is now considered invalid.
# Providing no definition is still supported, and yields the default safety
# mode (debug).

# Build the Engine in release mode, with assertions disabled.  In this mode
# API functions will check their requirements and return PEP_ILLEGAL_VALUE on
# failure.
#
# # Build the Engine in release mode.
# DEBUG = release

# Build the Engine in debug mode.  In this mode API functions check that
# requirements on their parameters are satisfied, and return PEP_ILLEGAL_VALUE
# on failure.
# Weak assertions (consistency checks on the state) are also checked.
#
# This is the default.
#
# # Build the Engine in debug mode.
# DEBUG = debug

# Build the Engine in maintainer mode.  In this mode API functions check that
# requirements on their parameters are satisfied, weak assertions are enabled
# and so are internal assertions, only intended for Engine developers; on any
# check violation the engine aborts in order to make the failure visible.
#
# This mode is intended for the few developers of the Engine itself, and not
# for Engine users.
#
# # Build the Engine in maintainer mode.
# DEBUG = maintainer


# Logging level.
# #########################################################

# You may uncomment one of the MAXLOGLEVEL definitions below.

# The "maximum logging level" defines the verbosity of the most verbose (which
# is to say least important) message that will be logged.  You may uncomment one
# of the following definitions.
# The default logging level depends on the safety mode.

# These levels are in order of increasing verbosity.
#
# MAXLOGLEVEL = CRITICAL
# MAXLOGLEVEL = ERROR
# MAXLOGLEVEL = WARNING
# MAXLOGLEVEL = EVENT
# MAXLOGLEVEL = API
# MAXLOGLEVEL = NONOK
# MAXLOGLEVEL = FUNCTION
# MAXLOGLEVEL = TRACE
# MAXLOGLEVEL = EVERYTHING

# Use a maximum logging level appropriate for a production system; this is
# equivalent to one of the levels above.
#
# MAXLOGLEVEL = PRODUCTION

# Use a maximum logging level appropriate for a basic installation.
#
# MAXLOGLEVEL = BASIC

# Use a maximum logging level appropriate for servicing the Engine.
#
# MAXLOGLEVEL = SERVICE

# Output every possible message.
#
# MAXLOGLEVEL = EVERYTHING


# Logging destinations.
# #########################################################

# You may uncomment one of the LOGDESTINATIONS definitions below, or write
# your own following the same pattern.

# It is possible to send log messages to a combination of the "destinations"
# specified as the PEP_LOG_DESTINATION_ENUM cases in src/pEp_log.h .
#
# The variable definition must be a valid C constant expression, quoted to
# prevent shell expansion since it will be used in a compilation command line..
#
# In case of a missing definition a reasonable default will be used.

# Log to stderr.
#
# LOGDESTINATIONS = PEP_LOG_DESTINATION_STDERR

# Log to both stderr and the log.db database.
#
# LOGDESTINATIONS = '(PEP_LOG_DESTINATION_STDERR|PEP_LOG_DESTINATION_DATABASE)'

# Log to stderr, syslog and the log.db database.
#
# LOGDESTINATIONS = '(PEP_LOG_DESTINATION_STDERR|PEP_LOG_DESTINATION_SYSLOG|PEP_LOG_DESTINATION_DATABASE)'


# Backward compatibility with xor trustwords
# #########################################################

# The current pEp protocol uses RIPEMD-160 trustwords, which are unfortunately
# incompatibile with the older xor trustwords used in protocol versions up to
# 3.2 included.

# By default we do *not* fall back to xor trustwords for compatibility, in order
# to prevent downgrade attacks.
# If the make variable TRUSTWORDSXORCOMPATIBILITY is defined, however, we do
# fall back to xor trustwords when communicating with communication partners
# using older protocol versions.

# # Fall back to xor trustwords with communication partners using protocol
# # version <= 3.2 (default: fail with PEP_TRUSTWORD_NOT_FOUND instead).
# TRUSTWORDSXORCOMPATIBILITY = yes

######### sqlite3 #########
# If empty (or undefined), compile sqlite3 from the sources shipped with the pEp distribution.
# Otherwise, use an sqlite3 implementation found in the OS's include/library paths.
#SQLITE3_FROM_OS=on