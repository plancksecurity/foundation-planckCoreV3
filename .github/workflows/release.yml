name: release

on: push

jobs:
  ubuntu-release:
    runs-on: ubuntu-latest
    env:
      YML2_PATH: /home/runner/venv/bin
      PREFIX: /home/runner/install
      GH_TOKEN: ${{ github.token }}
      GTEST_SRC_DIR: /usr/src/googletest/googletest
      GTEST_PL: /home/runner/work/foundation-planckCoreV3/foundation-planckCoreV3/gtest-parallel/gtest_parallel.py
      LDFLAGS: -Wl,-rpath /home/runner/install/lib -L/home/runner/install/lib
    steps:
      - name: Get sources
        uses: actions/checkout@v4
      - name: Create prefix
        run: mkdir -p /home/runner/install
      - name: Get libPlanckTransport
        run: |
          cd /home/runner/install
          gh release download cicd-pr2 -R plancksecurity/foundation-libPlanckTransport -p ubuntu-release.tar.bz2
          tar xvfj ubuntu-release.tar.bz2
          rm ubuntu-release.tar.bz2
      - name: Get libetpan
        run: |
          cd /home/runner/install
          gh release download lev -R plancksecurity/foundation-libetpan -p ubuntu-release.tar.bz2
          tar xvfj ubuntu-release.tar.bz2
          rm ubuntu-release.tar.bz2
      - name: Get planckCoreSequoiaBackend
        run: |
          cd /home/runner/install
          gh release download export-prc2 -R plancksecurity/foundation-planckCoreSequoiaBackend -p ubuntu-release.tar.bz2
          tar xvfj ubuntu-release.tar.bz2
          rm ubuntu-release.tar.bz2
      - name: Install asn1c
        run: sudo apt install asn1c
      - name: Install googletest
        run: sudo apt install googletest libgtest-dev libgmock-dev
      - name: Checkout gtest parallel
        uses: actions/checkout@v4
        with:
          repository: google/gtest-parallel
          path: /home/runner/work/foundation-planckCoreV3/foundation-planckCoreV3/gtest-parallel
      - name: Install faketime
        run: sudo apt install -y faketime
      - name: Install YML2
        run: |
          python -m venv /home/runner/venv
          . /home/runner/venv/bin/activate
          pip install git+https://github.com/plancksecurity/foundation-yml2
      - name: Build
        run: |
          . /home/runner/venv/bin/activate
          make -j8
      - name: Install
        run: |
          . /home/runner/venv/bin/activate
          make install
          make dbinstall
      - name: Test
        run: |
          . /home/runner/venv/bin/activate
          make test
      - name: archive artifacts on sha
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-${{ github.sha }}
          path: /home/runner/install
      - name: archive artifacts on tag
        if: github.ref_type == 'tag'
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-${{ github.ref }}
          path: /home/runner/install

  windows-release:
    runs-on: windows-latest
    permissions:
      contents: write
    env:
      YML2_PATH: 'C:\hostedtoolcache\windows\python\3.9.13\x64\Scripts'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.ALL_REPO_ACCESS_TOKEN }}
      - name: Setup msbuild
        uses: microsoft/setup-msbuild@v1.1
      - name: Install yml2
        run: |
          pip install git+https://github.com/plancksecurity/foundation-yml2
          pip list -v
          python -m site --user-base
      - name: Get SQLite
        run: |
          cd C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps
          curl -o sqlite.zip https://sqlite.org/2024/sqlite-tools-win-x64-3450000.zip
          unzip sqlite.zip
          rm sqlite.zip
      - name: Get planckCoreSequoiaBackend
        run: |
          gh release download export-prc2 -R plancksecurity/foundation-planckCoreSequoiaBackend -p windows-release.zip
          mkdir build-windows\botan
          mkdir target\Release\deps
          Expand-Archive -Force windows-release.zip build-windows\botan
          Expand-Archive -Force windows-release.zip target\Release\deps
          rm windows-release.zip
      - name: Build
        run: |
          mkdir ..\pEp
          cp src\pEpEngine.h ..\pEp
          msbuild build-windows\pEpEngine.vcxproj /p:Configuration=Release
          dir
#      - name: Compress
#        run: Compress-Archive -Path build-windows\Release\* -Destination windows-asn-release.zip
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ github.head_ref || github.ref_name }}
#          files: windows-asn-release.zip
#          fail_on_unmatched_files: true

